#!/usr/bin/env python3

import sys
import re
from subprocess import check_output

email = check_output(['git', 'show', '-s', "--format='%ae'"]).strip().decode()
current_branch = check_output(["git", "symbolic-ref", "--short", "HEAD"]).strip().decode()
branch_name_starts_with = r"^(feature|bugfix|hotfix|chore|refactor|documentation|style|test|performance|ci|build|revert|release)"

# Collect the parameters
commit_msg_filepath = sys.argv[1]
def validate_commit_message(commit_message):
    pattern = re.compile(r'^([A-Za-z]+-\d+)\s+#time\s+(\d+[hdmw]\s*\d*[hdmw]?\s*\d*[hdmw]?)\s+(bugfix|hotfix|feature|ci):\s+(?=[A-Za-z])[A-Za-z\s]{5,}.*')
    return bool(pattern.match(commit_message))

if email and '7edge.com' not in email:
    print(f"Please commit with 7edge account")
    sys.exit(1)

with open(commit_msg_filepath, 'r') as f:
    content = f.read()
    if not validate_commit_message(content) and not content.startswith('Merge'):
        print("commit-msg: The commit message should adhere to a specific format.\nIt should include the Jira issue ID,\nthe time spent on the task (in weeks, hours, and minutes), the type of work (bugfix, hotfix, or feature),\nand a description with at least 5 letters.")
        print("Example: EX-1 #time 1h5m feature: short description")
        sys.exit(1)
    if bool(re.match(branch_name_starts_with, current_branch)):
        # Updated regular expression pattern to handle optional version number in branch name
        issue_id_pattern = r'^(\w+-\d+)/(?:\d+\.\d+/)?(feature|bugfix|hotfix|chore|refactor|documentation|style|test|performance|ci|build|revert|release)'
        match = re.match(issue_id_pattern, current_branch)
        if match:
            issue_id = match.group(1)  # Extract issue ID from matched groups
            commit_content = content.split(' ')
            provided = commit_content[0]
            commit_content[0] = issue_id
            commit_content = ' '.join(commit_content)
            with open(commit_msg_filepath, "w") as fwriter:
                fwriter.write(commit_content)
            if provided != issue_id:
                print(f"Issue ID is changed from {provided} to {issue_id}")
